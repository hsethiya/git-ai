name: Release Build

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry Run (uncheck to create a release)'
        required: false
        default: true
        type: boolean

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    strategy:
      matrix:
        include:
          - os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            artifact_name: git-ai-linux-x64
            use_docker: true
            docker_image: ubuntu:20.04
          - os: ubuntu-22.04-arm
            target: aarch64-unknown-linux-gnu
            artifact_name: git-ai-linux-arm64
            use_docker: true
            docker_image: ubuntu:20.04
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: git-ai-windows-x64
            use_docker: false
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: git-ai-macos-arm64
            use_docker: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from Cargo.toml
        id: get-version
        shell: bash
        run: |
          VERSION=$(grep '^version = ' Cargo.toml | cut -d'"' -f2)
          echo "version=v$VERSION" >> $GITHUB_OUTPUT

      - name: Build in Docker (Linux)
        if: matrix.use_docker == true
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            -e DEBIAN_FRONTEND=noninteractive \
            ${{ matrix.docker_image }} \
            bash -c "
              apt-get update && \
              apt-get install -y curl build-essential pkg-config libssl-dev && \
              curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable --target ${{ matrix.target }} && \
              . \$HOME/.cargo/env && \
              cargo build --release --target ${{ matrix.target }} && \
              strip target/${{ matrix.target }}/release/git-ai
            "

      - name: Install Rust toolchain (non-Docker)
        if: matrix.use_docker == false
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Cache dependencies (non-Docker)
        if: matrix.use_docker == false
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-

      - name: Build release binary (non-Docker)
        if: matrix.use_docker == false
        run: |
          cargo build --release --target ${{ matrix.target }}
        env:
          CARGO_INCREMENTAL: 0

      - name: Verify binary architecture (Linux)
        if: contains(matrix.os, 'ubuntu')
        run: |
          file target/${{ matrix.target }}/release/git-ai
          ldd target/${{ matrix.target }}/release/git-ai || true
          echo "Required GLIBC version:"
          objdump -T target/${{ matrix.target }}/release/git-ai | grep GLIBC | sed 's/.*GLIBC_/GLIBC_/' | sort -V | uniq | tail -1

      - name: Verify binary architecture (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          file target/${{ matrix.target }}/release/git-ai.exe

      - name: Strip binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          strip target/${{ matrix.target }}/release/git-ai.exe

      - name: Strip binary (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          strip target/${{ matrix.target }}/release/git-ai

      - name: Create release directory
        run: |
          mkdir -p release

      - name: Copy binary to release directory
        if: matrix.os == 'windows-latest'
        run: |
          cp target/${{ matrix.target }}/release/git-ai.exe release/${{ matrix.artifact_name }}.exe

      - name: Copy binary to release directory (non-Windows)
        if: matrix.os != 'windows-latest'
        run: |
          cp target/${{ matrix.target }}/release/git-ai release/${{ matrix.artifact_name }}

      - name: Upload artifact (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: release/${{ matrix.artifact_name }}.exe
          retention-days: 30

      - name: Upload artifact (non-Windows)
        if: matrix.os != 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: release/${{ matrix.artifact_name }}
          retention-days: 30

  build-macos-intel:
    name: Build for macOS Intel
    runs-on: macos-13
    outputs:
      version: ${{ steps.get-version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from Cargo.toml
        id: get-version
        shell: bash
        run: |
          VERSION=$(grep '^version = ' Cargo.toml | cut -d'"' -f2)
          echo "version=v$VERSION" >> $GITHUB_OUTPUT

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-apple-darwin
          override: true

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-x86_64-apple-darwin-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-x86_64-apple-darwin-

      - name: Build release binary
        run: |
          cargo build --release --target x86_64-apple-darwin
        env:
          CARGO_INCREMENTAL: 0

      - name: Verify binary architecture
        run: |
          file target/x86_64-apple-darwin/release/git-ai
          lipo -info target/x86_64-apple-darwin/release/git-ai

      - name: Strip binary
        run: |
          strip target/x86_64-apple-darwin/release/git-ai

      - name: Create release directory
        run: |
          mkdir -p release

      - name: Copy binary to release directory
        run: |
          cp target/x86_64-apple-darwin/release/git-ai release/git-ai-macos-x64

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: git-ai-macos-x64
          path: release/git-ai-macos-x64
          retention-days: 30

  create-release:
    name: Create Release
    needs: [build, build-macos-intel]
    runs-on: ubuntu-latest
    if: success() && inputs.dry_run != true

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release directory
        run: mkdir -p release

      - name: Move artifacts to release directory
        run: |
          find artifacts -name "git-ai-*" -exec cp {} release/ \;

      - name: List available artifacts
        run: |
          echo "Available artifacts:"
          ls -la release/ || echo "No artifacts found"

      - name: Create checksums
        run: |
          cd release
          if ls git-ai-* 1> /dev/null 2>&1; then
            sha256sum git-ai-* > SHA256SUMS
          else
            echo "No binaries found to create checksums for"
            touch SHA256SUMS
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.build.outputs.version }}
          name: Release ${{ needs.build.outputs.version }}
          body: |
            ## git-ai ${{ needs.build.outputs.version }}

            ### Downloads
            - **Linux (x64)**: `git-ai-linux-x64`
            - **Linux (ARM64)**: `git-ai-linux-arm64`
            - **Windows (x64)**: `git-ai-windows-x64.exe`
            - **macOS (Intel)**: `git-ai-macos-x64`
            - **macOS (Apple Silicon)**: `git-ai-macos-arm64`

            ### Installation
            Download the appropriate binary for your platform and make it executable:
            ```bash
            chmod +x git-ai-<platform>
            ```

            ### SHA256 Checksums
            ```
            $(cat release/SHA256SUMS)
            ```
          files: |
            release/git-ai-*
            release/SHA256SUMS
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
